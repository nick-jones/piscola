// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Attrs map[string]bool

func AttrsPtr(v Attrs) *Attrs { return &v }

// Attributes:
//  - ID
//  - Time
//  - Value
//  - Deleted
//  - Attributes
type Item struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  Time int32 `thrift:"time,2,required" db:"time" json:"time"`
  Value string `thrift:"value,3,required" db:"value" json:"value"`
  Deleted bool `thrift:"deleted,4,required" db:"deleted" json:"deleted"`
  Attributes Attrs `thrift:"attributes,5" db:"attributes" json:"attributes,omitempty"`
}

func NewItem() *Item {
  return &Item{}
}


func (p *Item) GetID() int32 {
  return p.ID
}

func (p *Item) GetTime() int32 {
  return p.Time
}

func (p *Item) GetValue() string {
  return p.Value
}

func (p *Item) GetDeleted() bool {
  return p.Deleted
}
var Item_Attributes_DEFAULT Attrs

func (p *Item) GetAttributes() Attrs {
  return p.Attributes
}
func (p *Item) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *Item) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetTime bool = false;
  var issetValue bool = false;
  var issetDeleted bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetTime = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetDeleted = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Time is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  if !issetDeleted{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Deleted is not set"));
  }
  return nil
}

func (p *Item)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Item)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Time = v
}
  return nil
}

func (p *Item)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *Item)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Deleted = v
}
  return nil
}

func (p *Item)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(Attrs, size)
  p.Attributes =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Attributes[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Item) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Item"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Item) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Item) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("time", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time: ", p), err) }
  if err := oprot.WriteI32(int32(p.Time)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time: ", p), err) }
  return err
}

func (p *Item) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *Item) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleted", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleted: ", p), err) }
  if err := oprot.WriteBool(bool(p.Deleted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleted (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleted: ", p), err) }
  return err
}

func (p *Item) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.BOOL, len(p.Attributes)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Attributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err) }
  }
  return err
}

func (p *Item) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Item(%+v)", *p)
}

// Attributes:
//  - Ids
//  - Total
type Result_ struct {
  Ids []int32 `thrift:"ids,1,required" db:"ids" json:"ids"`
  Total int32 `thrift:"total,2" db:"total" json:"total"`
}

func NewResult_() *Result_ {
  return &Result_{}
}


func (p *Result_) GetIds() []int32 {
  return p.Ids
}
var Result__Total_DEFAULT int32 = 0

func (p *Result_) GetTotal() int32 {
  return p.Total
}
func (p *Result_) IsSetTotal() bool {
  return p.Total != Result__Total_DEFAULT
}

func (p *Result_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIds bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetIds = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIds{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ids is not set"));
  }
  return nil
}

func (p *Result_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Ids = append(p.Ids, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Result_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Total = v
}
  return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err) }
  return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTotal() {
    if err := oprot.WriteFieldBegin("total", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total: ", p), err) }
    if err := oprot.WriteI32(int32(p.Total)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.total (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total: ", p), err) }
  }
  return err
}

func (p *Result_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Result_(%+v)", *p)
}

// Attributes:
//  - Pattern
//  - Limit
//  - TotalRequired
type Query struct {
  Pattern string `thrift:"pattern,1,required" db:"pattern" json:"pattern"`
  Limit int32 `thrift:"limit,2" db:"limit" json:"limit"`
  TotalRequired bool `thrift:"total_required,3" db:"total_required" json:"total_required"`
}

func NewQuery() *Query {
  return &Query{
Limit: 10,
}
}


func (p *Query) GetPattern() string {
  return p.Pattern
}
var Query_Limit_DEFAULT int32 = 10

func (p *Query) GetLimit() int32 {
  return p.Limit
}
var Query_TotalRequired_DEFAULT bool = false

func (p *Query) GetTotalRequired() bool {
  return p.TotalRequired
}
func (p *Query) IsSetLimit() bool {
  return p.Limit != Query_Limit_DEFAULT
}

func (p *Query) IsSetTotalRequired() bool {
  return p.TotalRequired != Query_TotalRequired_DEFAULT
}

func (p *Query) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPattern bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPattern = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPattern{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Pattern is not set"));
  }
  return nil
}

func (p *Query)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Pattern = v
}
  return nil
}

func (p *Query)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *Query)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalRequired = v
}
  return nil
}

func (p *Query) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Query"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Query) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pattern: ", p), err) }
  if err := oprot.WriteString(string(p.Pattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pattern (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pattern: ", p), err) }
  return err
}

func (p *Query) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
    if err := oprot.WriteI32(int32(p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  }
  return err
}

func (p *Query) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTotalRequired() {
    if err := oprot.WriteFieldBegin("total_required", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_required: ", p), err) }
    if err := oprot.WriteBool(bool(p.TotalRequired)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.total_required (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_required: ", p), err) }
  }
  return err
}

func (p *Query) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Query(%+v)", *p)
}

// Attributes:
//  - IncludePatterns
//  - ExcludePatterns
//  - WithAttributes
//  - Limit
//  - TotalRequired
//  - IncludeDeleted
type AdvancedQuery struct {
  IncludePatterns []string `thrift:"include_patterns,1" db:"include_patterns" json:"include_patterns,omitempty"`
  ExcludePatterns []string `thrift:"exclude_patterns,2" db:"exclude_patterns" json:"exclude_patterns,omitempty"`
  WithAttributes Attrs `thrift:"with_attributes,3" db:"with_attributes" json:"with_attributes,omitempty"`
  Limit int32 `thrift:"limit,4" db:"limit" json:"limit"`
  TotalRequired bool `thrift:"total_required,5" db:"total_required" json:"total_required"`
  IncludeDeleted bool `thrift:"include_deleted,6" db:"include_deleted" json:"include_deleted"`
}

func NewAdvancedQuery() *AdvancedQuery {
  return &AdvancedQuery{
Limit: 10,
}
}

var AdvancedQuery_IncludePatterns_DEFAULT []string

func (p *AdvancedQuery) GetIncludePatterns() []string {
  return p.IncludePatterns
}
var AdvancedQuery_ExcludePatterns_DEFAULT []string

func (p *AdvancedQuery) GetExcludePatterns() []string {
  return p.ExcludePatterns
}
var AdvancedQuery_WithAttributes_DEFAULT Attrs

func (p *AdvancedQuery) GetWithAttributes() Attrs {
  return p.WithAttributes
}
var AdvancedQuery_Limit_DEFAULT int32 = 10

func (p *AdvancedQuery) GetLimit() int32 {
  return p.Limit
}
var AdvancedQuery_TotalRequired_DEFAULT bool = false

func (p *AdvancedQuery) GetTotalRequired() bool {
  return p.TotalRequired
}
var AdvancedQuery_IncludeDeleted_DEFAULT bool = false

func (p *AdvancedQuery) GetIncludeDeleted() bool {
  return p.IncludeDeleted
}
func (p *AdvancedQuery) IsSetIncludePatterns() bool {
  return p.IncludePatterns != nil
}

func (p *AdvancedQuery) IsSetExcludePatterns() bool {
  return p.ExcludePatterns != nil
}

func (p *AdvancedQuery) IsSetWithAttributes() bool {
  return p.WithAttributes != nil
}

func (p *AdvancedQuery) IsSetLimit() bool {
  return p.Limit != AdvancedQuery_Limit_DEFAULT
}

func (p *AdvancedQuery) IsSetTotalRequired() bool {
  return p.TotalRequired != AdvancedQuery_TotalRequired_DEFAULT
}

func (p *AdvancedQuery) IsSetIncludeDeleted() bool {
  return p.IncludeDeleted != AdvancedQuery_IncludeDeleted_DEFAULT
}

func (p *AdvancedQuery) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdvancedQuery)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.IncludePatterns =  tSet
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.IncludePatterns = append(p.IncludePatterns, _elem3)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *AdvancedQuery)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.ExcludePatterns =  tSet
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.ExcludePatterns = append(p.ExcludePatterns, _elem4)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *AdvancedQuery)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(Attrs, size)
  p.WithAttributes =  tMap
  for i := 0; i < size; i ++ {
var _key5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
var _val6 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val6 = v
}
    p.WithAttributes[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AdvancedQuery)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *AdvancedQuery)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TotalRequired = v
}
  return nil
}

func (p *AdvancedQuery)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IncludeDeleted = v
}
  return nil
}

func (p *AdvancedQuery) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AdvancedQuery"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdvancedQuery) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncludePatterns() {
    if err := oprot.WriteFieldBegin("include_patterns", thrift.SET, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:include_patterns: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.IncludePatterns)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.IncludePatterns); i++ {
      for j := i+1; j<len(p.IncludePatterns); j++ {
        if reflect.DeepEqual(p.IncludePatterns[i],p.IncludePatterns[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.IncludePatterns[i]))
        }
      }
    }
    for _, v := range p.IncludePatterns {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:include_patterns: ", p), err) }
  }
  return err
}

func (p *AdvancedQuery) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExcludePatterns() {
    if err := oprot.WriteFieldBegin("exclude_patterns", thrift.SET, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exclude_patterns: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.ExcludePatterns)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.ExcludePatterns); i++ {
      for j := i+1; j<len(p.ExcludePatterns); j++ {
        if reflect.DeepEqual(p.ExcludePatterns[i],p.ExcludePatterns[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.ExcludePatterns[i]))
        }
      }
    }
    for _, v := range p.ExcludePatterns {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exclude_patterns: ", p), err) }
  }
  return err
}

func (p *AdvancedQuery) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetWithAttributes() {
    if err := oprot.WriteFieldBegin("with_attributes", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:with_attributes: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.BOOL, len(p.WithAttributes)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.WithAttributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:with_attributes: ", p), err) }
  }
  return err
}

func (p *AdvancedQuery) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err) }
    if err := oprot.WriteI32(int32(p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err) }
  }
  return err
}

func (p *AdvancedQuery) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTotalRequired() {
    if err := oprot.WriteFieldBegin("total_required", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:total_required: ", p), err) }
    if err := oprot.WriteBool(bool(p.TotalRequired)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.total_required (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:total_required: ", p), err) }
  }
  return err
}

func (p *AdvancedQuery) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncludeDeleted() {
    if err := oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:include_deleted: ", p), err) }
    if err := oprot.WriteBool(bool(p.IncludeDeleted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.include_deleted (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:include_deleted: ", p), err) }
  }
  return err
}

func (p *AdvancedQuery) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdvancedQuery(%+v)", *p)
}

type Search interface {
  // Parameters:
  //  - Query
  Lookup(ctx context.Context, query *Query) (r *Result_, err error)
  // Parameters:
  //  - Query
  LookupAdvanced(ctx context.Context, query *AdvancedQuery) (r *Result_, err error)
  // Parameters:
  //  - Item
  Add(ctx context.Context, item *Item) (r bool, err error)
  // Parameters:
  //  - Item
  Replace(ctx context.Context, item *Item) (r bool, err error)
  // Parameters:
  //  - ID
  Remove(ctx context.Context, id int32) (r bool, err error)
}

type SearchClient struct {
  c thrift.TClient
}

func NewSearchClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SearchClient {
  return &SearchClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSearchClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SearchClient {
  return &SearchClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSearchClient(c thrift.TClient) *SearchClient {
  return &SearchClient{
    c: c,
  }
}

func (p *SearchClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Query
func (p *SearchClient) Lookup(ctx context.Context, query *Query) (r *Result_, err error) {
  var _args7 SearchLookupArgs
  _args7.Query = query
  var _result8 SearchLookupResult
  if err = p.Client_().Call(ctx, "lookup", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Query
func (p *SearchClient) LookupAdvanced(ctx context.Context, query *AdvancedQuery) (r *Result_, err error) {
  var _args9 SearchLookupAdvancedArgs
  _args9.Query = query
  var _result10 SearchLookupAdvancedResult
  if err = p.Client_().Call(ctx, "lookupAdvanced", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

// Parameters:
//  - Item
func (p *SearchClient) Add(ctx context.Context, item *Item) (r bool, err error) {
  var _args11 SearchAddArgs
  _args11.Item = item
  var _result12 SearchAddResult
  if err = p.Client_().Call(ctx, "add", &_args11, &_result12); err != nil {
    return
  }
  return _result12.GetSuccess(), nil
}

// Parameters:
//  - Item
func (p *SearchClient) Replace(ctx context.Context, item *Item) (r bool, err error) {
  var _args13 SearchReplaceArgs
  _args13.Item = item
  var _result14 SearchReplaceResult
  if err = p.Client_().Call(ctx, "replace", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *SearchClient) Remove(ctx context.Context, id int32) (r bool, err error) {
  var _args15 SearchRemoveArgs
  _args15.ID = id
  var _result16 SearchRemoveResult
  if err = p.Client_().Call(ctx, "remove", &_args15, &_result16); err != nil {
    return
  }
  return _result16.GetSuccess(), nil
}

type SearchProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Search
}

func (p *SearchProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SearchProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SearchProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSearchProcessor(handler Search) *SearchProcessor {

  self17 := &SearchProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self17.processorMap["lookup"] = &searchProcessorLookup{handler:handler}
  self17.processorMap["lookupAdvanced"] = &searchProcessorLookupAdvanced{handler:handler}
  self17.processorMap["add"] = &searchProcessorAdd{handler:handler}
  self17.processorMap["replace"] = &searchProcessorReplace{handler:handler}
  self17.processorMap["remove"] = &searchProcessorRemove{handler:handler}
return self17
}

func (p *SearchProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x18 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x18.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x18

}

type searchProcessorLookup struct {
  handler Search
}

func (p *searchProcessorLookup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchLookupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("lookup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchLookupResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.Lookup(ctx, args.Query); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lookup: " + err2.Error())
    oprot.WriteMessageBegin("lookup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("lookup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type searchProcessorLookupAdvanced struct {
  handler Search
}

func (p *searchProcessorLookupAdvanced) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchLookupAdvancedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("lookupAdvanced", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchLookupAdvancedResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.LookupAdvanced(ctx, args.Query); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lookupAdvanced: " + err2.Error())
    oprot.WriteMessageBegin("lookupAdvanced", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("lookupAdvanced", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type searchProcessorAdd struct {
  handler Search
}

func (p *searchProcessorAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchAddResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Add(ctx, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add: " + err2.Error())
    oprot.WriteMessageBegin("add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("add", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type searchProcessorReplace struct {
  handler Search
}

func (p *searchProcessorReplace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchReplaceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("replace", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchReplaceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Replace(ctx, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing replace: " + err2.Error())
    oprot.WriteMessageBegin("replace", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("replace", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type searchProcessorRemove struct {
  handler Search
}

func (p *searchProcessorRemove) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SearchRemoveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SearchRemoveResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Remove(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: " + err2.Error())
    oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("remove", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Query
type SearchLookupArgs struct {
  Query *Query `thrift:"query,1" db:"query" json:"query"`
}

func NewSearchLookupArgs() *SearchLookupArgs {
  return &SearchLookupArgs{}
}

var SearchLookupArgs_Query_DEFAULT *Query
func (p *SearchLookupArgs) GetQuery() *Query {
  if !p.IsSetQuery() {
    return SearchLookupArgs_Query_DEFAULT
  }
return p.Query
}
func (p *SearchLookupArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *SearchLookupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchLookupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Query = &Query{
  Limit: 10,
}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *SearchLookupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lookup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchLookupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *SearchLookupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchLookupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SearchLookupResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSearchLookupResult() *SearchLookupResult {
  return &SearchLookupResult{}
}

var SearchLookupResult_Success_DEFAULT *Result_
func (p *SearchLookupResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return SearchLookupResult_Success_DEFAULT
  }
return p.Success
}
func (p *SearchLookupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchLookupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchLookupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SearchLookupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lookup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchLookupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchLookupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchLookupResult(%+v)", *p)
}

// Attributes:
//  - Query
type SearchLookupAdvancedArgs struct {
  Query *AdvancedQuery `thrift:"query,1" db:"query" json:"query"`
}

func NewSearchLookupAdvancedArgs() *SearchLookupAdvancedArgs {
  return &SearchLookupAdvancedArgs{}
}

var SearchLookupAdvancedArgs_Query_DEFAULT *AdvancedQuery
func (p *SearchLookupAdvancedArgs) GetQuery() *AdvancedQuery {
  if !p.IsSetQuery() {
    return SearchLookupAdvancedArgs_Query_DEFAULT
  }
return p.Query
}
func (p *SearchLookupAdvancedArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *SearchLookupAdvancedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchLookupAdvancedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Query = &AdvancedQuery{
  Limit: 10,
}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *SearchLookupAdvancedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lookupAdvanced_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchLookupAdvancedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *SearchLookupAdvancedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchLookupAdvancedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SearchLookupAdvancedResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSearchLookupAdvancedResult() *SearchLookupAdvancedResult {
  return &SearchLookupAdvancedResult{}
}

var SearchLookupAdvancedResult_Success_DEFAULT *Result_
func (p *SearchLookupAdvancedResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return SearchLookupAdvancedResult_Success_DEFAULT
  }
return p.Success
}
func (p *SearchLookupAdvancedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchLookupAdvancedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchLookupAdvancedResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SearchLookupAdvancedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lookupAdvanced_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchLookupAdvancedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchLookupAdvancedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchLookupAdvancedResult(%+v)", *p)
}

// Attributes:
//  - Item
type SearchAddArgs struct {
  Item *Item `thrift:"item,1" db:"item" json:"item"`
}

func NewSearchAddArgs() *SearchAddArgs {
  return &SearchAddArgs{}
}

var SearchAddArgs_Item_DEFAULT *Item
func (p *SearchAddArgs) GetItem() *Item {
  if !p.IsSetItem() {
    return SearchAddArgs_Item_DEFAULT
  }
return p.Item
}
func (p *SearchAddArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *SearchAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Item = &Item{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *SearchAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *SearchAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SearchAddResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSearchAddResult() *SearchAddResult {
  return &SearchAddResult{}
}

var SearchAddResult_Success_DEFAULT bool
func (p *SearchAddResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return SearchAddResult_Success_DEFAULT
  }
return *p.Success
}
func (p *SearchAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchAddResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *SearchAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchAddResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchAddResult(%+v)", *p)
}

// Attributes:
//  - Item
type SearchReplaceArgs struct {
  Item *Item `thrift:"item,1" db:"item" json:"item"`
}

func NewSearchReplaceArgs() *SearchReplaceArgs {
  return &SearchReplaceArgs{}
}

var SearchReplaceArgs_Item_DEFAULT *Item
func (p *SearchReplaceArgs) GetItem() *Item {
  if !p.IsSetItem() {
    return SearchReplaceArgs_Item_DEFAULT
  }
return p.Item
}
func (p *SearchReplaceArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *SearchReplaceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchReplaceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Item = &Item{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *SearchReplaceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("replace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchReplaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *SearchReplaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchReplaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SearchReplaceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSearchReplaceResult() *SearchReplaceResult {
  return &SearchReplaceResult{}
}

var SearchReplaceResult_Success_DEFAULT bool
func (p *SearchReplaceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return SearchReplaceResult_Success_DEFAULT
  }
return *p.Success
}
func (p *SearchReplaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchReplaceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchReplaceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *SearchReplaceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("replace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchReplaceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchReplaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchReplaceResult(%+v)", *p)
}

// Attributes:
//  - ID
type SearchRemoveArgs struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
}

func NewSearchRemoveArgs() *SearchRemoveArgs {
  return &SearchRemoveArgs{}
}


func (p *SearchRemoveArgs) GetID() int32 {
  return p.ID
}
func (p *SearchRemoveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchRemoveArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SearchRemoveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("remove_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchRemoveArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *SearchRemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchRemoveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SearchRemoveResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSearchRemoveResult() *SearchRemoveResult {
  return &SearchRemoveResult{}
}

var SearchRemoveResult_Success_DEFAULT bool
func (p *SearchRemoveResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return SearchRemoveResult_Success_DEFAULT
  }
return *p.Success
}
func (p *SearchRemoveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SearchRemoveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchRemoveResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *SearchRemoveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("remove_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchRemoveResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SearchRemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchRemoveResult(%+v)", *p)
}


